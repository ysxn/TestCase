/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found.  It
 * should not be modified by hand.
 */

package com.example.recentsactivity;

public final class R {
    public static final class anim {
        public static final int recents_from_unknown_enter=0x7f040000;
        public static final int recents_from_unknown_exit=0x7f040001;
        public static final int recents_to_launcher_enter=0x7f040002;
        public static final int recents_to_launcher_exit=0x7f040003;
        public static final int recents_to_search_launcher_enter=0x7f040004;
        public static final int recents_to_search_launcher_exit=0x7f040005;
    }
    public static final class attr {
    }
    public static final class bool {
        public static final int config_dead_zone_flash=0x7f07000b;
        /**  Whether to enable KeyguardService or not 
         */
        public static final int config_enableKeyguardService=0x7f070010;
        /**  Control whether status bar should distinguish HSPA data icon form UMTS
    data icon on devices 
         */
        public static final int config_hspa_data_distinguishable=0x7f070004;
        /**  Show camera affordance on Keyguard 
         */
        public static final int config_keyguardShowCameraAffordance=0x7f070009;
        /**  Set to true to enable the user switcher on the keyguard. 
         */
        public static final int config_keyguardUserSwitcher=0x7f070012;
        /**  Whether to use cheap, less good looking shadows for recents 
         */
        public static final int config_recents_fake_shadows=0x7f070003;
        /**  Whether we're using the tablet-optimized recents interface (we use this
     value at runtime for some things) 
         */
        public static final int config_recents_interface_for_tablets=0x7f070000;
        /**  Whether recents thumbnails should stretch in both x and y to fill their
     ImageView 
         */
        public static final int config_recents_thumbnail_image_fits_to_xy=0x7f070001;
        /**  Whether recents should use hardware layers for its taskviews. This flag can be enabled
    for devices where the java drawing of round rects may be slow 
         */
        public static final int config_recents_use_hardware_layers=0x7f070002;
        /**  Should "4G" be shown instead of "LTE" when the network is NETWORK_TYPE_LTE? 
         */
        public static final int config_show4GForLTE=0x7f07000d;
        /**  When true, show 1/2G networks as 3G. 
         */
        public static final int config_showMin3G=0x7f070007;
        /**  Show phone (voice) signal strength instead of data in mobile RSSI. 
         */
        public static final int config_showPhoneRSSIForData=0x7f070006;
        /**  Show rotation lock toggle in System UI
         */
        public static final int config_showRotationLock=0x7f070008;
        /**  Whether or not we show the number in the bar. 
         */
        public static final int config_statusBarShowNumber=0x7f070005;
        /**  Whether we should use SRC drawing mode when drawing the scrim behind. If this flag is set,
         we change the canvas opacity so libhwui doesn't call glClear on our surface, and then we
         draw the scrim with SRC to overwrite the whole buffer, which saves us a layer of overdraw.
         However, SRC performs poorly on some devices, where it is more efficient to
         glClear + SRC_OVER, in which case this flag should be disabled. 
         */
        public static final int config_status_bar_scrim_behind_use_src=0x7f07000a;
        /**  Doze: does this device support STATE_DOZE and STATE_DOZE_SUSPEND?  
         */
        public static final int doze_display_state_supported=0x7f070013;
        /**  Doze: should notifications be used as a pulse signal? 
         */
        public static final int doze_pulse_on_notifications=0x7f070016;
        /**  Doze: should the pickup sensor be used as a pulse signal? 
         */
        public static final int doze_pulse_on_pick_up=0x7f070015;
        /**  Doze: should the significant motion sensor be used as a pulse signal? 
         */
        public static final int doze_pulse_on_significant_motion=0x7f070014;
        /**  Set to true to enable the classic notification ticker that scrolls
         Notification.tickerText across the status bar for what seems like an
         eternity. 
         */
        public static final int enable_ticker=0x7f070011;
        /**  Whether or not the RSSI tile is capitalized or not. 
         */
        public static final int quick_settings_rssi_tile_capitalization=0x7f07000c;
        /**  Transposes the nav bar in landscape (only used for purposes of layout). 
         */
        public static final int recents_has_transposed_nav_bar=0x7f07000f;
        /**  Transposes the search bar layout in landscape. 
         */
        public static final int recents_has_transposed_search_bar=0x7f07000e;
    }
    public static final class color {
        public static final int batterymeter_bolt_color=0x7f060008;
        /**  40% white 
         */
        public static final int batterymeter_charge_color=0x7f060007;
        public static final int batterymeter_frame_color=0x7f060006;
        /**  The color of the circle around the primary user in the user switcher 
         */
        public static final int current_user_border_color=0x7f06002c;
        /**  60% white 
         */
        public static final int data_usage_graph_track=0x7f060016;
        /**  20% white 
         */
        public static final int data_usage_graph_warning=0x7f060017;
        /**  60% deep teal 500 
         */
        public static final int data_usage_secondary=0x7f060015;
        public static final int doze_small_icon_background_color=0x7f060035;
        /**  Shadow color for the furthest pixels around the fake shadow for recents. 
         */
        public static final int fake_shadow_end_color=0x7f060038;
        /**  Shadow color for the first pixels around the fake shadow for recents. 
         */
        public static final int fake_shadow_start_color=0x7f060037;
        public static final int keyguard_affordance=0x7f060023;
        /**  not so muted after all 
 Tint color for the content on the notification overflow card. 
         */
        public static final int keyguard_overflow_content_color=0x7f06001a;
        public static final int keyguard_user_switcher_background_gradient_color=0x7f060034;
        /**  The color of the navigation bar icons. Need to be in sync with ic_sysbar_* 
         */
        public static final int navigation_bar_icon_color=0x7f060036;
        /**  60% 
 The "inside" of a notification, reached via longpress 
         */
        public static final int notification_guts_bg_color=0x7f06002e;
        public static final int notification_guts_btn_color=0x7f060031;
        public static final int notification_guts_text_color=0x7f060030;
        public static final int notification_guts_title_color=0x7f06002f;
        /**  The color of the legacy notification background 
         */
        public static final int notification_legacy_background_color=0x7f060024;
        public static final int notification_list_shadow_top=0x7f060005;
        /**  The color of the material notification background 
         */
        public static final int notification_material_background_color=0x7f060025;
        /**  The color of the material notification background when dimmed 
         */
        public static final int notification_material_background_dimmed_color=0x7f060026;
        /**  The color of the material notification background when low priority 
         */
        public static final int notification_material_background_low_priority_color=0x7f060027;
        /**  The color of the material notification background for media notifications when no custom
         color is specified 
         */
        public static final int notification_material_background_media_default_color=0x7f060028;
        public static final int notification_panel_solid_background=0x7f060003;
        /**  The color of the ripples on the low priority notifications 
         */
        public static final int notification_ripple_color_low_priority=0x7f06002a;
        /**  The color of the ripples on the tinted notifications 
         */
        public static final int notification_ripple_tinted_color=0x7f06002b;
        /**  The color of the ripples on the untinted notifications 
         */
        public static final int notification_ripple_untinted_color=0x7f060029;
        public static final int qs_batterymeter_frame_color=0x7f060009;
        /**  60% white 
         */
        public static final int qs_detail_empty=0x7f060012;
        public static final int qs_detail_progress_track=0x7f060014;
        /**  14% blue grey 200
         */
        public static final int qs_detail_transition=0x7f060013;
        /**  70% white 
         */
        public static final int qs_subhead=0x7f060011;
        /**  deep orange 600 
         */
        public static final int qs_text=0x7f06000e;
        public static final int qs_tile_divider=0x7f06000f;
        /**  16% white 
         */
        public static final int qs_tile_text=0x7f060010;
        public static final int qs_user_detail_icon_muted=0x7f060019;
        /**  The recents task bar dark dismiss icon color to be drawn on top of light backgrounds. 
         */
        public static final int recents_task_bar_dark_dismiss_color=0x7f06001f;
        /**  The recents task bar dark text color to be drawn on top of light backgrounds. 
         */
        public static final int recents_task_bar_dark_text_color=0x7f06001d;
        /**  The default recents task bar background color. 
         */
        public static final int recents_task_bar_default_background_color=0x7f06001b;
        /**  The recents task bar highlight color. 
         */
        public static final int recents_task_bar_highlight_color=0x7f060020;
        /**  The recents task bar light dismiss icon color to be drawn on top of dark backgrounds. 
         */
        public static final int recents_task_bar_light_dismiss_color=0x7f06001e;
        /**  The recents task bar light text color to be drawn on top of dark backgrounds. 
         */
        public static final int recents_task_bar_light_text_color=0x7f06001c;
        /**  The lock to task button background color. 
         */
        public static final int recents_task_view_lock_to_app_button_background_color=0x7f060021;
        /**  The lock to task button foreground color. 
         */
        public static final int recents_task_view_lock_to_app_button_color=0x7f060022;
        public static final int search_panel_circle_color=0x7f060032;
        public static final int search_panel_ripple_color=0x7f060033;
        public static final int segmented_button_text_inactive=0x7f06002d;
        public static final int status_bar_clock_color=0x7f060018;
        public static final int status_bar_recents_app_label_color=0x7f060004;
        public static final int system_accent_color=0x7f06000c;
        public static final int system_bar_background_opaque=0x7f060000;
        public static final int system_bar_background_semi_transparent=0x7f060001;
        /**  40% black 
         */
        public static final int system_bar_background_transparent=0x7f060002;
        public static final int system_primary_color=0x7f06000a;
        /**  blue grey 900 
         */
        public static final int system_secondary_color=0x7f06000b;
        /**  deep teal 200 
         */
        public static final int system_warning_color=0x7f06000d;
    }
    public static final class dimen {
        /**  Default screen margins, per the Android Design guidelines. 

         Example customization of dimensions originally defined in res/values/dimens.xml
         (such as screen margins) for screens with more than 820dp of available width. This
         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively).
    
         */
        public static final int activity_horizontal_margin=0x7f0b0000;
        public static final int activity_vertical_margin=0x7f0b0001;
        /**  Battery level text padding end when in expanded QS and on Keyguard 
         */
        public static final int battery_level_padding_end=0x7f0b009a;
        /**  The text size for battery level 
         */
        public static final int battery_level_text_size=0x7f0b00ad;
        public static final int battery_margin_bottom=0x7f0b00b3;
        public static final int blinds_pop_threshold=0x7f0b0035;
        /**  Space reserved for the cards behind the top card in the bottom stack 
         */
        public static final int bottom_stack_peek_amount=0x7f0b0068;
        /**  The height of the area before the bottom stack in which the notifications slow down 
         */
        public static final int bottom_stack_slow_down_length=0x7f0b006a;
        /**  fill_horizontal|top 
 Height of the carrier/wifi name label 
         */
        public static final int carrier_label_height=0x7f0b0032;
        /**  The top padding of the clear all button 
         */
        public static final int clear_all_padding_top=0x7f0b009b;
        /**  The padding bottom of the clock group when QS is collapsed. 
         */
        public static final int clock_collapsed_bottom_margin=0x7f0b008f;
        /**  The padding bottom of the clock group when QS is collapsed for large text 
         */
        public static final int clock_collapsed_bottom_margin_large_text=0x7f0b0090;
        /**  The padding bottom of the clock group when QS is expanded. 
         */
        public static final int clock_expanded_bottom_margin=0x7f0b008e;
        /**  Height of the draggable handle at the bottom of the phone notification panel 
         */
        public static final int close_handle_height=0x7f0b002a;
        /**  Amount of close_handle that will NOT overlap the notification list 
         */
        public static final int close_handle_underlap=0x7f0b002b;
        public static final int data_usage_graph_marker_width=0x7f0b008d;
        /**  used by DessertCase 
         */
        public static final int dessert_case_cell_size=0x7f0b0054;
        /**  The width of the region on the left/right edge of the screen for performing the camera/
         phone hints. 
         */
        public static final int edge_tap_area_width=0x7f0b0086;
        /**  Inset shadow for FakeShadowDrawable. It is used to avoid gaps between the card
         and the shadow. 
         */
        public static final int fake_shadow_inset=0x7f0b00b7;
        public static final int fake_shadow_size=0x7f0b00b8;
        /**  The padding on the global screenshot background image 
         */
        public static final int global_screenshot_bg_padding=0x7f0b0023;
        /**  Default glow radius for GlowPadView 
         */
        public static final int glowpadview_glow_radius=0x7f0b0055;
        /**  Default distance from each snap target that GlowPadView considers a "hit" 
         */
        public static final int glowpadview_inner_radius=0x7f0b0056;
        /**  Additional translation (downwards) for appearing notifications when going to the full shade
         from Keyguard. 
         */
        public static final int go_to_full_shade_appearing_translation=0x7f0b00a1;
        /**  Margin on the left side of the battery % in the header. 
         */
        public static final int header_battery_margin_expanded=0x7f0b009e;
        /**  Margin on the left side of the battery % when on Keyguard. 
         */
        public static final int header_battery_margin_keyguard=0x7f0b009f;
        /**  Distance between notifications and header when they are considered to be colliding. 
         */
        public static final int header_notifications_collide_distance=0x7f0b0082;
        public static final int heads_up_window_height=0x7f0b007a;
        /**  The chevron padding to the circle when hinting 
         */
        public static final int hint_chevron_circle_padding=0x7f0b007e;
        /**  The grow amount for the camera and phone circles when hinting 
         */
        public static final int hint_grow_amount_sideways=0x7f0b007d;
        /**  Move distance for the unlock hint animation on the lockscreen 
         */
        public static final int hint_move_distance=0x7f0b0085;
        /**  The maximum width of the navigation bar ripples. 
         */
        public static final int key_button_ripple_max_width=0x7f0b00b6;
        /**  The width/height of the phone/camera/unlock icon view on keyguard. 
         */
        public static final int keyguard_affordance_height=0x7f0b00a8;
        /**  The width/height of the phone/camera/unlock icon drawable on keyguard. 
         */
        public static final int keyguard_affordance_icon_height=0x7f0b00aa;
        public static final int keyguard_affordance_icon_width=0x7f0b00ab;
        /**  The minimum background radius when swiping to a side for the camera / phone affordances. 
         */
        public static final int keyguard_affordance_min_background_radius=0x7f0b007c;
        public static final int keyguard_affordance_width=0x7f0b00a9;
        /**  Margin on the left side of the carrier text on Keyguard 
         */
        public static final int keyguard_carrier_text_margin=0x7f0b009d;
        public static final int keyguard_clock_notifications_margin_max=0x7f0b0079;
        /**  The margin between the clock and the notifications on Keyguard. See
         keyguard_clock_height_fraction_* for the difference between min and max.
         */
        public static final int keyguard_clock_notifications_margin_min=0x7f0b0078;
        /**  Minimum distance the user has to drag down to go to the full shade. 
         */
        public static final int keyguard_drag_down_min_distance=0x7f0b0077;
        public static final int keyguard_indication_margin_bottom=0x7f0b00ac;
        /**  The minimum amount the user needs to swipe to go to the camera / phone. 
         */
        public static final int keyguard_min_swipe_amount=0x7f0b007b;
        /**  The thickness of the colored border around the current user. 
         */
        public static final int keyguard_user_switcher_border_thickness=0x7f0b008c;
        /**  Width for the notification panel and related windows 
         */
        public static final int match_parent=0x7f0b002f;
        /**  Largest size an avatar might need to be drawn in the user picker, status bar, or
         quick settings header 
         */
        public static final int max_avatar_size=0x7f0b009c;
        /**  bottom_stack_peek_amount + notification_min_height
         + notification_collapse_second_card_padding 
         */
        public static final int min_stack_height=0x7f0b0069;
        /**  The minimum amount of top overscroll to go to the quick settings. 
         */
        public static final int min_top_overscroll_to_qs=0x7f0b0070;
        /**  The width of user avatar when collapsed 
         */
        public static final int multi_user_avatar_collapsed_size=0x7f0b0094;
        /**  The width of user avatar when on Keyguard 
         */
        public static final int multi_user_avatar_keyguard_size=0x7f0b0095;
        /**  end margin for multi user switch in collapsed quick settings 
         */
        public static final int multi_user_switch_collapsed_margin=0x7f0b0089;
        /**  end margin for multi user switch in expanded quick settings 
         */
        public static final int multi_user_switch_expanded_margin=0x7f0b0088;
        /**  end margin for multi user switch in collapsed quick settings 
         */
        public static final int multi_user_switch_keyguard_margin=0x7f0b008a;
        /**  The width of the multi user switch on keyguard and collapsed QS header. 
         */
        public static final int multi_user_switch_width_collapsed=0x7f0b0091;
        /**  The width of the multi user switch in expanded QS header. 
         */
        public static final int multi_user_switch_width_expanded=0x7f0b0092;
        /**  The width of user avatar when on Keyguard 
         */
        public static final int multi_user_switch_width_keyguard=0x7f0b0093;
        /**  Diameter of outer shape drawable shown in navbar search
         */
        public static final int navbar_search_outerring_diameter=0x7f0b0027;
        /**  Diameter of outer shape drawable shown in navbar search. Should be 1/2 of above value 
         */
        public static final int navbar_search_outerring_radius=0x7f0b0028;
        /**  Height of search panel including navigation bar height 
         */
        public static final int navbar_search_panel_height=0x7f0b0029;
        /**  Default distance beyond which snaps to the matching target 
         */
        public static final int navbar_search_snap_margin=0x7f0b0026;
        /**  thickness (height) of the dead zone at the top of the navigation bar,
         reducing false presses on navbar buttons; approx 2mm 
         */
        public static final int navigation_bar_deadzone_size=0x7f0b0017;
        /**  size of the dead zone when touches have recently occurred elsewhere on screen 
         */
        public static final int navigation_bar_deadzone_size_max=0x7f0b0018;
        /**  thickness (height) of the navigation bar on phones that require it 
         */
        public static final int navigation_bar_size=0x7f0b0016;
        /**  The width of the view containing the menu/ime navigation bar icons 
         */
        public static final int navigation_extra_key_width=0x7f0b0025;
        /**  The width of the view containing non-menu status bar icons 
         */
        public static final int navigation_key_width=0x7f0b0024;
        /**  The padding to the second card when the notifications collapse. 
         */
        public static final int notification_collapse_second_card_padding=0x7f0b0071;
        /**  half the distance between notifications in the panel 
         */
        public static final int notification_divider_height=0x7f0b0022;
        /**  radius of the corners of the material rounded rect background 
         */
        public static final int notification_material_rounded_rect_radius=0x7f0b0087;
        /**  Height of a large notification in the status bar 
         */
        public static final int notification_max_height=0x7f0b001c;
        /**  Height of a medium notification in the status bar 
         */
        public static final int notification_mid_height=0x7f0b001d;
        /**  Height of a small notification in the status bar 
         */
        public static final int notification_min_height=0x7f0b001b;
        /**  The padding between the individual notification cards. 
         */
        public static final int notification_padding=0x7f0b006f;
        /**  The padding between the individual notification cards when dimmed. 
         */
        public static final int notification_padding_dimmed=0x7f0b006e;
        /**  Minimum fraction of the screen that should be taken up by the notification panel.
         Not used at this screen size. 
         */
        public static final int notification_panel_min_height_frac=0x7f0b0034;
        /**  includes notification_side_padding on each side 
         */
        public static final int notification_panel_width=0x7f0b0031;
        /**  Distance after which the scrim starts fading in when dragging down the quick settings 
         */
        public static final int notification_scrim_wait_distance=0x7f0b0084;
        /**  The side padding of the notifications
         */
        public static final int notification_side_padding=0x7f0b006c;
        /**  Height of a the summary ("more card") notification on keyguard. 
         */
        public static final int notification_summary_height=0x7f0b001e;
        public static final int notifications_top_padding=0x7f0b0076;
        /**  The distance you can pull a notification before it pops open 
         */
        public static final int one_finger_pop_limit=0x7f0b0033;
        /**  Amount to offset bottom of notification peek window from top of status bar. 
         */
        public static final int peek_window_y_offset=0x7f0b0015;
        /**  The size of the gesture span needed to activate the "pull" notification expansion 
         */
        public static final int pull_span_min=0x7f0b0036;
        public static final int qs_brightness_padding_top=0x7f0b0047;
        public static final int qs_data_usage_text_size=0x7f0b004d;
        public static final int qs_data_usage_usage_text_size=0x7f0b004e;
        /**  The font size of the date in QS 
         */
        public static final int qs_date_collapsed_size=0x7f0b0099;
        public static final int qs_detail_button_text_size=0x7f0b0049;
        public static final int qs_detail_empty_text_size=0x7f0b004c;
        public static final int qs_detail_header_text_size=0x7f0b0048;
        public static final int qs_detail_item_height=0x7f0b0045;
        public static final int qs_detail_item_height_twoline=0x7f0b0046;
        public static final int qs_detail_item_primary_text_size=0x7f0b004a;
        public static final int qs_detail_item_secondary_text_size=0x7f0b004b;
        public static final int qs_dual_tile_height=0x7f0b003c;
        public static final int qs_dual_tile_padding_horizontal=0x7f0b003e;
        public static final int qs_dual_tile_padding_vertical=0x7f0b003d;
        /**  The font size of the "emergency calls only" label in QS 
         */
        public static final int qs_emergency_calls_only_text_size=0x7f0b0098;
        /**  Lockscreen falsing threshold for quick settings. 
         */
        public static final int qs_falsing_threshold=0x7f0b0074;
        public static final int qs_panel_padding=0x7f0b003b;
        public static final int qs_panel_padding_bottom=0x7f0b0044;
        /**  How far the expanded QS panel peeks from the header in collapsed state. 
         */
        public static final int qs_peek_height=0x7f0b0051;
        public static final int qs_tile_divider_height=0x7f0b003a;
        public static final int qs_tile_height=0x7f0b0037;
        public static final int qs_tile_icon_size=0x7f0b0038;
        public static final int qs_tile_padding_below_icon=0x7f0b0041;
        public static final int qs_tile_padding_bottom=0x7f0b0042;
        public static final int qs_tile_padding_top=0x7f0b003f;
        public static final int qs_tile_padding_top_large_text=0x7f0b0040;
        public static final int qs_tile_spacing=0x7f0b0043;
        public static final int qs_tile_text_size=0x7f0b0039;
        /**  The font size of the time when collapsed in QS 
         */
        public static final int qs_time_collapsed_size=0x7f0b0096;
        /**  The font size of the time when expanded in QS 
         */
        public static final int qs_time_expanded_size=0x7f0b0097;
        /**  Used to calculate the translation animation duration, the expected amount of movement 
         in dps over one second of time. 
         */
        public static final int recents_animation_movement_in_dps_per_second=0x7f0b0065;
        /**  The height of the search bar space. 
         */
        public static final int recents_search_bar_space_height=0x7f0b0061;
        /**  The overscroll percentage allowed on the stack. 
         */
        public static final int recents_stack_overscroll_percentage=0x7f0b0063;
        /**  The top offset for the task stack. 
         */
        public static final int recents_stack_top_padding=0x7f0b0064;
        /**  The side padding for the task stack as a percentage of the width. 
         */
        public static final int recents_stack_width_padding_percentage=0x7f0b0062;
        /**  The min alpha to apply to a task affiliation group color. 
         */
        public static final int recents_task_affiliation_color_min_alpha_percentage=0x7f0b0066;
        /**  The height of a task view bar. 
         */
        public static final int recents_task_bar_height=0x7f0b0060;
        /**  The amount to offset when animating into an affiliate group. 
         */
        public static final int recents_task_view_affiliate_group_enter_offset=0x7f0b005e;
        /**  The size of the application icon in the recents task view. 
         */
        public static final int recents_task_view_application_icon_size=0x7f0b0057;
        /**  The amount of highlight to make on each task view. 
         */
        public static final int recents_task_view_highlight=0x7f0b005c;
        /**  The height of the lock-to-app button. 
         */
        public static final int recents_task_view_lock_to_app_button_height=0x7f0b005d;
        /**  The amount to translate when animating the removal of a task. 
         */
        public static final int recents_task_view_remove_anim_translation_x=0x7f0b005b;
        /**  The radius of the rounded corners on a task view. 
         */
        public static final int recents_task_view_rounded_corners_radius=0x7f0b0058;
        /**  The alpha to apply to a task thumbnail. 
         */
        public static final int recents_task_view_thumbnail_alpha=0x7f0b005f;
        /**  The max translation in the Z index for the last task. 
         */
        public static final int recents_task_view_z_max=0x7f0b005a;
        /**  The min translation in the Z index for the last task. 
         */
        public static final int recents_task_view_z_min=0x7f0b0059;
        /**  The margin to the edge of the screen from where the circle starts to appear 
         */
        public static final int search_panel_circle_base_margin=0x7f0b00a3;
        /**  The elevation of the search panel circle 
         */
        public static final int search_panel_circle_elevation=0x7f0b00a5;
        /**  The diameter of the search panel circle. 
         */
        public static final int search_panel_circle_size=0x7f0b00a2;
        /**  The amount the circle translates when appearing 
         */
        public static final int search_panel_circle_travel_distance=0x7f0b00a4;
        /**  The height of the scrim behind the search panel circle. 
         */
        public static final int search_panel_scrim_height=0x7f0b00a6;
        /**  How far the user needs to drag up to invoke search. 
         */
        public static final int search_panel_threshold=0x7f0b00a7;
        public static final int segmented_button_radius=0x7f0b0050;
        public static final int segmented_button_spacing=0x7f0b004f;
        /**  The height of the speed bump view. 
         */
        public static final int speed_bump_height=0x7f0b0072;
        public static final int standard_notification_panel_width=0x7f0b0030;
        /**  The font size for the clock 
         */
        public static final int status_bar_clock_size=0x7f0b001a;
        /**  Margin at the edge of the screen to ignore touch events for in the windowshade. 
         */
        public static final int status_bar_edge_ignore=0x7f0b0002;
        /**  Height of the status bar header bar 
         */
        public static final int status_bar_header_height=0x7f0b002c;
        /**  Height of the status bar header bar when expanded 
         */
        public static final int status_bar_header_height_expanded=0x7f0b002d;
        /**  Height of the status bar header bar when on Keyguard 
         */
        public static final int status_bar_header_height_keyguard=0x7f0b002e;
        /**  opacity at which Notification icons will be drawn in the status bar 
         */
        public static final int status_bar_icon_drawing_alpha=0x7f0b0020;
        /**  size at which Notification icons will be drawn in the status bar 
         */
        public static final int status_bar_icon_drawing_size=0x7f0b001f;
        /**  gap on either side of status bar notification icons 
         */
        public static final int status_bar_icon_padding=0x7f0b0021;
        /**  Height of notification icons in the status bar 
         */
        public static final int status_bar_icon_size=0x7f0b0019;
        /**  Size of application description text 
         */
        public static final int status_bar_recents_app_description_text_size=0x7f0b0009;
        /**  Where to place the app icon over the thumbnail 
         */
        public static final int status_bar_recents_app_icon_left_margin=0x7f0b0013;
        /**  Upper height limit for application icon 
         */
        public static final int status_bar_recents_app_icon_max_height=0x7f0b0004;
        /**  Recent Applications parameters 
 Upper width limit for application icon 
         */
        public static final int status_bar_recents_app_icon_max_width=0x7f0b0003;
        public static final int status_bar_recents_app_icon_top_margin=0x7f0b0014;
        /**  When recents first appears, how far the icon and label of the primary activity
         travel 
         */
        public static final int status_bar_recents_app_icon_translate_distance=0x7f0b0012;
        /**  Left margin of application label text 
         */
        public static final int status_bar_recents_app_label_left_margin=0x7f0b0010;
        /**  Size of application label text 
         */
        public static final int status_bar_recents_app_label_text_size=0x7f0b0008;
        /**  Width of application label text 
         */
        public static final int status_bar_recents_app_label_width=0x7f0b000f;
        /**  Padding between recents items 
         */
        public static final int status_bar_recents_item_padding=0x7f0b0011;
        /**  Margin between recents container and glow on the right 
         */
        public static final int status_bar_recents_right_glow_margin=0x7f0b000c;
        /**  Size of fading edge for scrolling 
         */
        public static final int status_bar_recents_scroll_fading_edge_length=0x7f0b000b;
        /**  Padding for text descriptions 
         */
        public static final int status_bar_recents_text_description_padding=0x7f0b000e;
        /**  Size of fading edge for text 
         */
        public static final int status_bar_recents_text_fading_edge_length=0x7f0b000a;
        public static final int status_bar_recents_thumbnail_bg_padding=0x7f0b0007;
        public static final int status_bar_recents_thumbnail_height=0x7f0b0006;
        /**  How far the thumbnail for a recent app appears from left edge 
         */
        public static final int status_bar_recents_thumbnail_left_margin=0x7f0b000d;
        /**  Size of application thumbnail 
         */
        public static final int status_bar_recents_thumbnail_width=0x7f0b0005;
        /**  Falsing threshold used when dismissing notifications from the lockscreen. 
         */
        public static final int swipe_helper_falsing_threshold=0x7f0b0075;
        /**  Margin on the right side of the system icon group on Keyguard. 
         */
        public static final int system_icons_keyguard_padding_end=0x7f0b00a0;
        /**  end margin for system icons if multi user switch is hidden 
         */
        public static final int system_icons_switcher_hidden_expanded_margin=0x7f0b008b;
        /**  Space reserved for the cards behind the top card in the top stack 
         */
        public static final int top_stack_peek_amount=0x7f0b0067;
        /**  The height of the area before the top stack in which the notifications slow down 
         */
        public static final int top_stack_slow_down_length=0x7f0b006b;
        /**  TrustDrawable: Inner radius at the beginning of the enter animation 
         */
        public static final int trust_circle_inner_radius_enter=0x7f0b00b1;
        /**  TrustDrawable: Inner radius at the end of the exit animation 
         */
        public static final int trust_circle_inner_radius_exit=0x7f0b00b0;
        /**  TrustDrawable: Maximum inner radius of the breathing animation 
         */
        public static final int trust_circle_inner_radius_visible_max=0x7f0b00af;
        /**  TrustDrawable: Minimum inner radius of the breathing animation 
         */
        public static final int trust_circle_inner_radius_visible_min=0x7f0b00ae;
        /**  TrustDrawable: Thickness of the circle 
         */
        public static final int trust_circle_thickness=0x7f0b00b2;
        /**  Lockscreen unlocking falsing threshold. 
         */
        public static final int unlock_falsing_threshold=0x7f0b0073;
        /**  Distance the user needs to drag vertically such that a swipe is accepted to unlock the
         device. 
         */
        public static final int unlock_move_distance=0x7f0b0083;
        /**  Volume panel dialog y offset 
         */
        public static final int volume_panel_top=0x7f0b007f;
        /**  Volume panel dialog width 
         */
        public static final int volume_panel_width=0x7f0b0080;
        /**  Volume panel z depth 
         */
        public static final int volume_panel_z=0x7f0b0081;
        /**  Extra padding between the mobile data type icon and the strength indicator when the data
         type icon is wide. 
         */
        public static final int wide_type_icon_start_padding=0x7f0b00b4;
        /**  Extra padding between the mobile data type icon and the strength indicator when the data
         type icon is wide for the tile in quick settings. 
         */
        public static final int wide_type_icon_start_padding_qs=0x7f0b00b5;
        /**  Z distance between notifications if they are in the stack 
         */
        public static final int z_distance_between_notifications=0x7f0b006d;
        public static final int zen_mode_condition_detail_button_padding=0x7f0b0052;
        /**  Explicit width of the zen toast window 
         */
        public static final int zen_toast_width=0x7f0b0053;
    }
    public static final class drawable {
        public static final int heads_up_notification_bg_pressed=0x7f020007;
        public static final int ic_launcher=0x7f020000;
        public static final int notification_number_text_color=0x7f020001;
        public static final int recents_callout_line=0x7f020006;
        public static final int status_bar_notification_row_background_color=0x7f020005;
        public static final int status_bar_recents_app_thumbnail_background=0x7f020004;
        public static final int system_bar_background=0x7f020003;
        public static final int ticker_background_color=0x7f020002;
    }
    public static final class fraction {
        /**  Margin on the right side of the system icon group on Keyguard. 
         */
        public static final int battery_button_height_fraction=0x7f0c0002;
        /**  Fraction value to smooth the edges of the battery icon. The path will be inset by this
         fraction of a pixel.
         */
        public static final int battery_subpixel_smoothing_left=0x7f0c0003;
        public static final int battery_subpixel_smoothing_right=0x7f0c0004;
        /**  The fraction of the screen height where the clock on the Keyguard has its center. The
         max value is used when no notifications are displaying, and the min value is when the
         highest possible number of notifications are showing. 
         */
        public static final int keyguard_clock_y_fraction_max=0x7f0c0000;
        public static final int keyguard_clock_y_fraction_min=0x7f0c0001;
    }
    public static final class id {
        public static final int action_settings=0x7f0e0002;
        public static final int recents_view=0x7f0e0000;
        public static final int task_view_content=0x7f0e0001;
    }
    public static final class integer {
        public static final int blinds_pop_duration_ms=0x7f080011;
        /**  How many icons may be shown at once in the system bar. Includes any
         slots that may be reused for things like IME control. 
         */
        public static final int config_maxNotificationIcons=0x7f080002;
        /**  Min alpha % that recent items will fade to while being dismissed 
         */
        public static final int config_recent_item_min_alpha=0x7f08000a;
        /**  The number of app icons we keep in memory 
         */
        public static final int config_recents_max_icon_count=0x7f080001;
        /**  The number of app thumbnails we keep in memory 
         */
        public static final int config_recents_max_thumbnail_count=0x7f080000;
        /**  Vibration duration for GlowPadView used in SearchPanelView 
         */
        public static final int config_search_panel_view_vibration_duration=0x7f080005;
        /**  Amount of time to hold off before showing the search panel when the user presses home 
         */
        public static final int config_show_search_delay=0x7f080003;
        /**  Vibration duration for GlowPadView used in SearchPanelView 
         */
        public static final int config_vibration_duration=0x7f080004;
        /**  Tiles with feature timeouts: number of days to show after feature is used. 
         */
        public static final int days_to_show_timeout_tiles=0x7f08002d;
        /**  Doze: duration to avoid false pickup gestures triggered by notification vibrations 
         */
        public static final int doze_pickup_vibration_threshold=0x7f080027;
        /**  Doze: pulse parameter - how long does it take to fade in? 
         */
        public static final int doze_pulse_duration_in=0x7f080028;
        /**  Doze: pulse parameter - how long does it take to fade out? 
         */
        public static final int doze_pulse_duration_out=0x7f08002a;
        /**  Doze: pulse parameter - once faded in, how long does it stay visible? 
         */
        public static final int doze_pulse_duration_visible=0x7f080029;
        /**  Doze: maximum number of times the notification pulse schedule can be reset 
         */
        public static final int doze_pulse_schedule_resets=0x7f080026;
        /**  Doze: alpha to apply to small icons when dozing 
         */
        public static final int doze_small_icon_alpha=0x7f08002b;
        /**  milliseconds before the heads up notification auto-dismisses. 
         */
        public static final int heads_up_notification_decay=0x7f080012;
        /**  milliseconds before the heads up notification accepts touches. 
         */
        public static final int heads_up_sensitivity_delay=0x7f080013;
        /**  The maximum count of notifications on Keyguard. The rest will be collapsed in an overflow
     card. 
         */
        public static final int keyguard_max_notification_count=0x7f080025;
        public static final int navigation_bar_deadzone_decay=0x7f080009;
        /**  decay duration (from size_max -> size), in ms 
         */
        public static final int navigation_bar_deadzone_hold=0x7f080008;
        /**  top|center_horizontal 
         */
        public static final int notification_panel_layout_gravity=0x7f080032;
        /**  The length of the vibration when the notification pops open. 
         */
        public static final int one_finger_pop_duration_ms=0x7f080006;
        public static final int quick_settings_brightness_dialog_long_timeout=0x7f080010;
        /**  Timeouts for brightness dialog to disappear 
         */
        public static final int quick_settings_brightness_dialog_short_timeout=0x7f08000f;
        /**  The maximum number of rows in the QuickSettings 
         */
        public static final int quick_settings_max_rows=0x7f08000c;
        /**  The maximum number of rows in the QuickSettings when on the keyguard 
         */
        public static final int quick_settings_max_rows_keyguard=0x7f08000d;
        /**  The number of columns in the QuickSettings 
         */
        public static final int quick_settings_num_columns=0x7f08000b;
        /**  The number of columns that the top level tiles span in the QuickSettings 
         */
        public static final int quick_settings_user_time_settings_tile_span=0x7f08000e;
        /**  The delay to enforce between each alt-tab key press. 
         */
        public static final int recents_alt_tab_key_delay=0x7f080024;
        /**  The long duration when animating in/out the lock to app button. 
         */
        public static final int recents_animate_lock_to_app_button_long_duration=0x7f08001f;
        /**  The short duration when animating in/out the lock to app button. 
         */
        public static final int recents_animate_lock_to_app_button_short_duration=0x7f08001e;
        /**  The animation delay for animating the first task in. This should roughly be the animation
     duration of the transition in to recents. 
         */
        public static final int recents_animate_task_bar_enter_delay=0x7f080018;
        /**  The min animation duration for animating the task bar in. 
         */
        public static final int recents_animate_task_bar_enter_duration=0x7f080017;
        /**  The min animation duration for animating the task bar out. 
         */
        public static final int recents_animate_task_bar_exit_duration=0x7f08001a;
        /**  The animation delay for animating the first task in. This should roughly be the animation
     duration of the transition in to recents from home. 
         */
        public static final int recents_animate_task_enter_from_home_delay=0x7f08001b;
        /**  The min animation duration for animating the task in when transitioning from home. 
         */
        public static final int recents_animate_task_enter_from_home_duration=0x7f08001c;
        /**  The animation stagger to apply to each task animation when transitioning from home. 
         */
        public static final int recents_animate_task_enter_from_home_stagger_delay=0x7f08001d;
        /**  The min animation duration for animating the task bar out. 
         */
        public static final int recents_animate_task_exit_to_home_duration=0x7f080019;
        /**  The animation duration for scrolling the stack to a particular item. 
         */
        public static final int recents_animate_task_stack_scroll_duration=0x7f080022;
        /**  The animation duration for animating the removal of a task view. 
         */
        public static final int recents_animate_task_view_remove_duration=0x7f080021;
        /**  The min animation duration for animating views that are currently visible. 
         */
        public static final int recents_filter_animate_current_views_duration=0x7f080015;
        /**  The min animation duration for animating views that are newly visible. 
         */
        public static final int recents_filter_animate_new_views_duration=0x7f080016;
        /**  The minimum alpha for the dim applied to cards that go deeper into the stack. 
         */
        public static final int recents_max_task_stack_view_dim=0x7f080023;
        /**  The min animation duration for animating the nav bar scrim in. 
         */
        public static final int recents_nav_bar_scrim_enter_duration=0x7f080020;
        /**  The duration in seconds to wait before the dismiss buttons are shown. 
         */
        public static final int recents_task_bar_dismiss_delay_seconds=0x7f080014;
        /**  Gravity for the notification panel 
         */
        public static final int standard_notification_panel_layout_gravity=0x7f080031;
        /**  Whether we're using the tablet-optimized recents interface (we use this
     value at runtime for some things) 
         */
        public static final int status_bar_recents_bg_gradient_degrees=0x7f080007;
        /**  87% of 0xff 
 Volume: time to delay dismissing the volume panel after a click is performed 
         */
        public static final int volume_panel_dismiss_delay=0x7f08002c;
        /**  Number of times to show the strong alarm warning text in the volume dialog 
         */
        public static final int zen_mode_alarm_warning_threshold=0x7f08002e;
        /**  Zen toast fade in/out duration 
         */
        public static final int zen_toast_animation_duration=0x7f08002f;
        /**  Zen toast visibility duration 
         */
        public static final int zen_toast_visible_duration=0x7f080030;
    }
    public static final class interpolator {
        public static final int decelerate_quint=0x7f050000;
        public static final int fast_out_linear_in=0x7f050001;
        public static final int fast_out_slow_in=0x7f050002;
        public static final int linear_out_slow_in=0x7f050003;
    }
    public static final class layout {
        public static final int activity_main=0x7f030000;
        public static final int recents=0x7f030001;
        public static final int recents_task_view=0x7f030002;
    }
    public static final class menu {
        public static final int main=0x7f0d0000;
    }
    public static final class string {
        public static final int action_settings=0x7f0a0007;
        public static final int app_name=0x7f0a0005;
        /**  Component to be used as the status bar service.  Must implement the IStatusBar
     interface.  This name is in the ComponentName flattened format (package/class)  
         */
        public static final int config_statusBarComponent=0x7f0a0000;
        /**  Doze: when to pulse after a buzzworthy notification arrives 
         */
        public static final int doze_pulse_schedule=0x7f0a0004;
        public static final int hello_world=0x7f0a0006;
        /**  The tiles to display in QuickSettings 
         */
        public static final int quick_settings_tiles=0x7f0a0002;
        /**  The default tiles to display in QuickSettings 
         */
        public static final int quick_settings_tiles_default=0x7f0a0001;
        /**  Defines the implementation of the velocity tracker to be used for the panel expansion. Can
         be 'platform' or 'noisy' (i.e. for noisy touch screens). 
         */
        public static final int velocity_tracker_impl=0x7f0a0003;
    }
    public static final class style {
        /** 
        Base application theme, dependent on API level. This theme is replaced
        by AppBaseTheme from res/values-vXX/styles.xml on newer devices.
    

            Theme customizations available in newer API levels can go in
            res/values-vXX/styles.xml, while customizations related to
            backward-compatibility can go here.
        

        Base application theme for API 11+. This theme completely replaces
        AppBaseTheme from res/values/styles.xml on API 11+ devices.
    
 API 11 theme customizations can go here. 

        Base application theme for API 14+. This theme completely replaces
        AppBaseTheme from BOTH res/values/styles.xml and
        res/values-v11/styles.xml on API 14+ devices.
    
 API 14 theme customizations can go here. 
         */
        public static final int AppBaseTheme=0x7f090001;
        /**  Application theme. 
 All customizations that are NOT specific to a particular API-level can go here. 
         */
        public static final int AppTheme=0x7f090002;
        /**  Alternate Recents theme 
         */
        public static final int RecentsTheme_Wallpaper=0x7f090003;
        /**  The theme to use for RecentsActivity. 
         */
        public static final int config_recents_activity_theme=0x7f090000;
    }
}
